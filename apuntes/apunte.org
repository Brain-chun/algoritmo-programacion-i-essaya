#+TITLE: Apunte

* Any y All
Recibe un iterable, en Any si alguno es True devuelve True, en All si todos no son True devuelve False
#+BEGIN_SRC python :results output
todos_true = [True, True, True]
todos_false = [False, False, False]
algunos_true = [False, True, False]

print("Any - ")
print(any(todos_true))
print(any(todos_false))
print(any(algunos_true))
print("All - ")
print(all(todos_true))
print(all(todos_false))
print(all(algunos_true))
#+END_SRC

#+RESULTS:
: Any -
: True
: False
: True
: All -
: True
: False
: False
* Lambda
La sintaxis se compone de lambda <parameros>: <resultado>
Tiene return implicito
#+BEGIN_SRC python :results output
mas_uno = lambda x: x+1
print(mas_uno(10))
#+END_SRC

#+RESULTS:
: 11
** Remplasos de lambda para uso de map y filter
En map y filter se les tiene que pasar una funcion y en esto casos lambda es muy
util.
Pero existe una sintaxis mas bonita para esto tambien
#+BEGIN_SRC python :results output
numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print([n + 1 for n in numeros])
print([n for n in numeros if n > 5])
print([n + 2 for n in numeros if n > 5])
#+END_SRC

#+RESULTS:
: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
: [6, 7, 8, 9, 10]
: [8, 9, 10, 11, 12]
