#+TITLE: Clase

* Ejercicio 9.1
Escribir una funcion que reciba una lista de tuplas, y que devuelva un
diccionario en donde la claves sean los primeros elementos de las tuplas, y los
valores una lista con los segundos.
#+BEGIN_SRC python :results output
lista_tuplas = [("Hola", "don Pepito"), ("Hola", "don Jose"), ("Buenos", "dias")]


def crear_diccionario(lista):
    diccionario = {}
    for clave, valor in lista:
        if clave not in diccionario:
            diccionario[clave] = []
        diccionario[clave].append(valor)
    return diccionario


print(crear_diccionario(lista_tuplas))
#+END_SRC

#+RESULTS:
: {'Hola': ['don Pepito', 'don Jose'], 'Buenos': ['dias']}
* Ejercicio 9.2 a)
Escribir una fucnion que recibauna cadena y devuelva un diccionario con la
cantidad de apariciones de cada palabra en la cadena. Por ejemplo, si recibe
"Que lindo dia que hace hoy" debe devolver: {"que":2, "lindo":1, "dia":1, "hace":1,
"hoy":1}

#+BEGIN_SRC python :results output
def contar_palabras(cadena):
    palabras = {}
    lista_palabras = cadena.lower().split()
    for palabra in lista_palabras:
        palabras[palabra] = palabras.get(palabra, 0) + 1
    return palabras


print(contar_palabras("que lindo dia que hace hoy"))
#+END_SRC

#+RESULTS:
: {'que': 2, 'lindo': 1, 'dia': 1, 'hace': 1, 'hoy': 1}
* Ejercicio 9
Escibir una funcion que recibe dos listas con palabras (cadenas), y determine si
ambas listas tienen las mismas palabras

#+BEGIN_SRC python :results output
l1 = ['Hola', 'hoy', 'es', 'hoy', 'viernes']
l2 = ['hoy', 'Hola', 'viernes', 'es', 'hoy', 'hoy', 'hoy']

def comparar_listas(lista1, lista2):
    # En los set no hay repetidos
    aux1 = set(lista1)
    aux2 = set(lista2)
    return aux1 == aux2

print(comparar_listas(l1,l2))
#+END_SRC

#+RESULTS:
: True
* Ejercicio de parcial
Dada una cadena, tenemos que generar un mensaje con los caracteres de la cadena
La funcion devuelve True o False si es posible o no con la cadena
** Pensamiento del algoritmo
1. Armar diccionario
   d = {'a':2,'H':1...}
   a. defino d
   b. recorrer al texto por letras
   c. Usar ger para generar d
2. Recorrer mensaje por letra
   a. Verificar si letra pertenece al texto
      a. Si no pertenece, False
      b. Si si, True
** Respuesta
#+BEGIN_SRC python :results output
def mensaje_de_rescate(texto, mensaje):
    letras_disponibles = {}
    for letra in texto:
        letras_disponibles[letra] = letras_disponibles.get(letra, 0) + 1
    for letra in mensaje:
        if letras_disponibles.get(letra, 0) <= 0:
            return False
        letras_disponibles[letra] -= 1
    return True


print(mensaje_de_rescate("texto", "txt"))
#+END_SRC

#+RESULTS:
: True
* Ejercicio extra
#+BEGIN_SRC python :results output
lista_tuplas = [("Hola", "don Pepito"), ("Hola", "don Jose"), ("Buenos", "dias")]

def crear_diccionario(lista):
    diccionario = {}
    for clave, valor in lista:
       diccionario[clave] = diccionario.get(clave, [])
       diccionario[clave].append(valor)
    return diccionario

print(crear_diccionario(lista_tuplas))
#+END_SRC

#+RESULTS:
: {'Hola': ['don Pepito', 'don Jose'], 'Buenos': ['dias']}
